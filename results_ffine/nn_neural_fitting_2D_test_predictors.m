load nn_findpeaks_attributes_2D
predictor = predictor(:,4:end); % get rid of the first three (sums and means are redundant)
txt_arr = txt_arr(4:end);       % get rid of the first three (sums and means are redundant)

%% generate all possible combinations (choose predictors)
% v = 1:size(predictor,2);
% ind_arr = [];

k = 3;
% for k = 1:size(predictor,2)
% find all possible combinations of k variables out of v
C = combnk(v,k);

% cascade into a big matric
%     ind_arr = [ind_arr;[C,nan(size(C,1),size(v,2)-size(C,2))]];
% end
ind_arr = C;

predictor_original = predictor;

%%
for kk = 1:length(ind_arr)
    
    predictor = predictor_original(ind_arr(kk,:));
    %% Solve an Input-Output Fitting problem with a Neural Network
    % Script generated by Neural Fitting app
    % Created 28-Sep-2018 17:13:57
    %
    % This script assumes these variables are defined:
    %
    %   predictor - input data.
    %   response - target data.
    
    x = predictor';
    t = response';
    
    % Choose a Training Function
    % For a list of all training functions type: help nntrain
    % 'trainlm' is usually fastest.
    % 'trainbr' takes longer but may be better for challenging problems.
    % 'trainscg' uses less memory. Suitable in low memory situations.
    trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.
    
    % Create a Fitting Network
    hiddenLayerSize = 10;
    net = fitnet(hiddenLayerSize,trainFcn);
    
    % Setup Division of Data for Training, Validation, Testing
    net.divideParam.trainRatio = 70/100;
    net.divideParam.valRatio = 15/100;
    net.divideParam.testRatio = 15/100;
    
    % Train the Network
    [net,tr] = train(net,x,t);
    
    % Test the Network
    y = net(x);
    e = gsubtract(t,y);
    performance = perform(net,t,y);
    
    % View the Network
    %     view(net)
    
    % Plots
    % Uncomment these lines to enable various plots.
    %figure, plotperform(tr)
    %figure, plottrainstate(tr)
    %figure, ploterrhist(e)
%     figure, plotregression(t,y)
    %figure, plotfit(net,x,t)
    
    [r,m,b] = regression(t,y);
    
end
