% % % %% tip X- and Y-location NN
% % % n_tr = 10;
% % % load pre_nn_20SDF_H_30_short;
% % % predictor = [TIPx;TIPy];
% % % response = RSP;
% % % 
% % % %% Solve an Input-Output Fitting problem with a Neural Network
% % % % Script generated by Neural Fitting app
% % % % Created 28-Sep-2018 17:13:57
% % % 
% % % x = predictor;
% % % t = response;
% % % 
% % % % Choose a Training Function
% % % % For a list of all training functions type: help nntrain
% % % % 'trainlm' is usually fastest.
% % % % 'trainbr' takes longer but may be better for challenging problems. %%%%%% SUPPORTS REGULARIZATION %%%%%%
% % % % 'trainscg' uses less memory. Suitable in low memory situations.
% % % trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.
% % % 
% % % %% repeatedly train the network and find the best
% % % p_arr = nan(1,n_tr);
% % % e_arr = p_arr;
% % % tr_arr = cell(1,n_tr);
% % % y_arr = tr_arr;
% % % 
% % % for nn = 1:n_tr
% % %     
% % %     % Create a Fitting Network
% % %     hiddenLayerSize = 10;
% % %     net = fitnet(hiddenLayerSize,trainFcn);
% % %     
% % %     % Setup Division of Data for Training, Validation, Testing
% % %     net.divideParam.trainRatio = 70/100;
% % %     net.divideParam.valRatio = 15/100;
% % %     net.divideParam.testRatio = 15/100;
% % %     
% % %     
% % %     % Train the Network
% % %     [net,tr] = train(net,x,t);
% % %     
% % %     % Test the Network
% % %     y = net(x);
% % %     e = gsubtract(t,y);
% % %     p = perform(net,t,y);
% % %     
% % %     p_arr(nn) = p;
% % %     e_arr(nn) = norm(e);
% % %     tr_arr{nn} = tr;
% % %     y_arr{nn} = y;
% % %     
% % %     clear net
% % %     
% % % end
% % % 
% % % save nn_20SDF_H_30_short_test_tipOnly

%% nn results
load nn_20SDF_H_30_short;
[ind_a,ind_b] = find(P_ARR==min(min(P_ARR)));

tr = TR_ARR{ind_a}{ind_b};  % struct from nn results
y = Y_ARR{ind_a}{ind_b};    % output response from NN

ind_te = tr.testInd;        % testing indices
ind_tr = tr.trainInd;       % training indices

pdt = PDT([1,ind_a],:);     % best predictors
rsp_o = t;                  % original response
rsp_nn = y;                 % NN response

%% non-linear fit
load nn_20SDF_H_30_short_test_tipOnly
ind_n = find(p_arr==min(p_arr));
rsp_xy = y_arr{ind_n};

% for ii = 1:2
%     [fitresult, ~] = createFit(pdt(1,ind_tr), pdt(2,ind_tr), rsp_o(ii,ind_tr));
%     rsp_xy(ii,:) = fitresult(pdt(1,:),pdt(2,:));
% end

% plot results
b_arr = {rsp_nn,rsp_xy};
c_arr = colormap(lines(2));

for ii = 1:2

    R = nan(1,2);
    figure(ii);
    hold on;
    temp = [0,max(rsp_o(ii,:))];
    plot(temp,temp,'color',0.5*[1,1,1]);

    for bb = 1:length(b_arr)
        a = rsp_o(ii,ind_te);
        b = b_arr{bb}(ii,ind_te);
        h(bb) = scatter(a,b,10,c_arr(bb,:),'filled');
        alpha(h(bb),0.5);
        R(bb) = regression(a,b);
    end
    legend(h,['NN, R = ' num2str(R(1),3)],['XY, R = ' num2str(R(2),3)],'location','northoutside');
    xlabel(['actual ' RSP_txt{ii}]);
    ylabel(['predicted ' RSP_txt{ii}]);
    axis equal;
    axis tight;

    set(gca,'fontsize',8);
    set(gcf,'paperposition',[0,0,3,3.5],'unit','inches');
    print('-dtiff','-r300',['test_tipOnly_' num2str(ii)]);
    close;

end