clear; ca; clc;

load pre_nn_20SDF_H_30_short

%% load predictors

for ii = 2:7
    
    nn = [1,ii];
    predictor = PDT(nn,:);
    response = RSP;
    
    %% Solve an Input-Output Fitting problem with a Neural Network
    % Script generated by Neural Fitting app
    % Created 28-Sep-2018 17:13:57
    
    x = predictor;
    t = response;
    
    % Choose a Training Function
    % For a list of all training functions type: help nntrain
    % 'trainlm' is usually fastest.
    % 'trainbr' takes longer but may be better for challenging problems. %%%%%% SUPPORTS REGULARIZATION %%%%%%
    % 'trainscg' uses less memory. Suitable in low memory situations.
    trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.
    
    % Create a Fitting Network
    hiddenLayerSize = 10;
    net = fitnet(hiddenLayerSize,trainFcn);
    
    % Setup Division of Data for Training, Validation, Testing
    net.divideParam.trainRatio = 80/100;
    net.divideParam.valRatio = 15/100;
    net.divideParam.testRatio = 5/100;
    
    %% repeatedly train the network and find the best
    % Train the Network
    [net,tr] = train(net,x,t);
    
    % Test the Network
    y = net(x);
    e = gsubtract(t,y);
    p = perform(net,t,y);
    [r,~,~] = regression(t,y);
    
    %%
    ind = tr.testInd;
    figure;
    for rr = 1:size(nn,2)
        subplot(1,2,rr);
        h = scatter(t(rr,ind),y(rr,ind),'k','filled');
        r = regression(t(rr,ind),y(rr,ind));
        alpha(h, 0.3);
        axis equal
        xlabel(['actual ' RSP_txt{rr}]);
        ylabel(['predicted ' RSP_txt{rr}]);
        title(['R = ' num2str(r)]);
        axis equal
    end
    text(0,0,['Predictors: ' PDT_txt{1} ', ' PDT_txt{nn(size(nn,2))}]);
    
end