clear; ca; clc;

load pre_nn_20SDF_H_30_short

%% load predictors
predictor = XY; % load predictors
response = [ROLL;BEND];

predictor(isnan(predictor)) = 0;

%% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 28-Sep-2018 17:13:57

x = predictor;
t = response;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems. %%%%%% SUPPORTS REGULARIZATION %%%%%%
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 80/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 5/100;

%% repeatedly train the network and find the best
% for tt = 1:n_train
    
    % Train the Network
    [net,tr] = train(net,x,t);
    
    % Test the Network
    y = net(x);
    e = gsubtract(t,y);
    p = perform(net,t,y);
    [r,~,~] = regression(t,y);
    
    
% end

%% 
plot(t,y,'*k');
axis equal
xlabel('actual \theta_{roll}');
ylabel('predicted \theta_{roll}');