clear; clc; ca;

%%
fname = 'proc_incl_pitch_manualPicking_new';
load C:\Users\yang\ownCloud\MATLAB\__experiment\roll_bend_pitch\proc\proc_incl_pitch_manualPicking_new

% modify for compatibility with simulation data
ref_pt = -fliplr(ref_pt);                       % flip x-y and signs
for ii = 1:length(PKS)
    temp = PKS{ii}(1,:);                        % flip x-y and signs
    PKS{ii}(1:2,:) = -flipud(PKS{ii}(1:2,:));   % flip x-y and signs
    PKS{ii}(2,:) = -temp;                       % flip x-y and signs
    PKS{ii}(3,:) = -PKS{ii}(3,:) + 1;           % flip toggles
end
pre_nn;

%% load data
load C:\Users\yang\ownCloud\MATLAB\__simulation\varHelixN\pitch_0_50\varHelixN_16\nn_findApex_3DoF_varHelixN_16 PDT_best Y TR NET
% load C:\Users\yang\ownCloud\MATLAB\__experiment\roll_bend_pitch\pre_nn\pre_nn_incl_pitch_manualPicking PDT RSP

%%
net = NET;
pp = PDT_best;
predictor = PDT(pp,:); [predictor,PS_pdt] = mapminmax(predictor); % normalization
response = RSP; [response,PS_rsp] = mapminmax(response);         % normalization

%% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 28-Sep-2018 17:13:57

x = predictor;
t = response;

y = net(x);
p = perform(net,t,y);
